参照链接：https://www.cnblogs.com/zsychanpin/p/7191021.html
一：简介
一般来说，想要查询一条数据，需要先查询缓存，如果缓存没有，需要再查询数据库，并把查到的结果放到缓存中
这种做法，查缓存-查数据库-set缓存，缓存代码和业务代码会耦合在一起。
而spring cache使用凝视的方式，利用aop思想，在业务代码上加上凝视，使开发人员只需关注业务代码，
而不用操作缓存即可使用到缓存带来的便利。
//查询一条数据
public void fun(){
//1.查缓存
//2.缓存不存在，查询数据库（业务代码）
//3.将从数据库查到的结果写进缓存
}
//spring cache 方式
@Cacheable
public void fun(){
//查询数据库（业务代码）
}
二:凝视
spring cache提供了三种凝视，@Cacheable,@CachePut,@CacheEvict
@Cacheable:如果缓存中有查询的数据，就不会执行@Cacheable标注的方法。select型
@CachePut:总会执行@CachePut标注的方法，并将结果存入缓存。update型
@CacheEvict:将缓存清空。trancate型
三:注意
 1.基于proxy的spring aop带来的内部调用的问题
 @Cacheable
 public void fun(){}
 this.fun();对象引用问题，会导致缓存失效

 2.@CacheEvict的可靠性问题
 @CacheEvict中有一个属性beforeInvocation,缺省为false,即在标注方法执行完成之后才会进行缓存清除。
 但是执行标注方法的时候，如果出现异常则可能会清除失效
 @CacheEvict
 public void fun(){
    throw new Exception();
 }


