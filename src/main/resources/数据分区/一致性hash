作用：解决分布式系统中，将一部分请求固定落到同一台服务器中，起到负载均衡的作用
一般做法：hash(用户id)%服务器个数n。结果是0- n-1。当服务器数量增加或减少时，用户id和服务器映射关系将被破坏掉
改进：int hash()函数返回的值在0-最大整数之间。假如有5个ip。hash(ip),五个ip的hash值落在0-最大整数之间(hash环)。
假如五个ip的hash值是这样分布的
0-hash(ip1),hash(ip1)-hash(ip2),hash(ip2)-hash(ip3),hash(ip3)-hash(ip4),hash(ip4)-hash(ip5),hash(ip5)-hash(ip0)
这就是hash环。
当用户请求过来时，会计算出用户hash(id)落在哈希环的哪个区间上，假如落在了0-hash(ip1)上，则根据路由规则，会将请求分配到ip1上进行处理
当新增或减少服务器数量时，只会破坏一个节点的请求。
问题：会存在hash不平衡倾斜的情况。即可能有很多请求都落在同一个节点上。
为了避免这种情况。可以增加虚拟节点。使请求尽可能均衡
